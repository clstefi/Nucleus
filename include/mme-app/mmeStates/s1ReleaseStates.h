

 /*
 * Copyright 2021-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */
 
 /******************************************************
 * s1ReleaseStates.h
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/stateMachineTmpls/state.h.tt>
 ******************************************************/
 #ifndef __S1_RELEASE__
 #define __S1_RELEASE__

 #include "state.h"

 namespace mme {
	class S1ReleaseStart : public SM::State
	{
		public:
			/******************************************
			* Instance 
			*    Creates static instance for the state
			*******************************************/
			static S1ReleaseStart* Instance();

			/****************************************
			* S1ReleaseStart
			*    Destructor
			****************************************/
			~S1ReleaseStart();			
			
			/******************************************
			* initialize
			*  Initializes action handlers for the state
			* and next state
			******************************************/
			void initialize();

			/*****************************************
			* returns stateId
			*****************************************/
			uint16_t getStateId() const;

			/*****************************************
			* returns stateName
			*****************************************/
			const char* getStateName() const;

		protected:
			/****************************************
			* S1ReleaseStart
			*    Protected constructor
			****************************************/
			S1ReleaseStart();  
	};
	
	class S1ReleaseWfReleaseAccessBearerResp : public SM::State
	{
		public:
			/******************************************
			* Instance 
			*    Creates static instance for the state
			*******************************************/
			static S1ReleaseWfReleaseAccessBearerResp* Instance();

			/****************************************
			* S1ReleaseWfReleaseAccessBearerResp
			*    Destructor
			****************************************/
			~S1ReleaseWfReleaseAccessBearerResp();			
			
			/******************************************
			* initialize
			*  Initializes action handlers for the state
			* and next state
			******************************************/
			void initialize();

			/*****************************************
			* returns stateId
			*****************************************/
			uint16_t getStateId() const;

			/*****************************************
			* returns stateName
			*****************************************/
			const char* getStateName() const;

		protected:
			/****************************************
			* S1ReleaseWfReleaseAccessBearerResp
			*    Protected constructor
			****************************************/
			S1ReleaseWfReleaseAccessBearerResp();  
	};
	
	class S1ReleaseWfUeCtxtReleaseComp : public SM::State
	{
		public:
			/******************************************
			* Instance 
			*    Creates static instance for the state
			*******************************************/
			static S1ReleaseWfUeCtxtReleaseComp* Instance();

			/****************************************
			* S1ReleaseWfUeCtxtReleaseComp
			*    Destructor
			****************************************/
			~S1ReleaseWfUeCtxtReleaseComp();			
			
			/******************************************
			* initialize
			*  Initializes action handlers for the state
			* and next state
			******************************************/
			void initialize();

			/*****************************************
			* returns stateId
			*****************************************/
			uint16_t getStateId() const;

			/*****************************************
			* returns stateName
			*****************************************/
			const char* getStateName() const;

		protected:
			/****************************************
			* S1ReleaseWfUeCtxtReleaseComp
			*    Protected constructor
			****************************************/
			S1ReleaseWfUeCtxtReleaseComp();  
	};
	
};
#endif // __S1_RELEASE__
