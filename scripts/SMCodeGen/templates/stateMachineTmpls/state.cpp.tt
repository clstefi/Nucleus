 [%- PROCESS templates/stateMachineTmpls/macros.tt -%]
 [%- Procedure = TemplateInputVar -%]
 [%- includeList = includes %]
 [%- DefaultState = GET_DEFAULT_STATE(Procedure) %]
/*
 * Copyright [%CURRENTYEAR%]-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */
 
/**************************************
 * [% FILENAME(Procedure.Name) %]States.cpp
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/stateMachineTmpls/state.cpp.tt>
 **************************************/


#include "actionTable.h"
#include "actionHandlers/actionHandlers.h"
[%- FOREACH header IN includeList.split(',') %]
#include <[% header %]>
[%- END %]

#include "mmeStates/[% FILENAME(Procedure.Name) %]States.h"

using namespace mme;
using namespace SM;

[%- FOREACH State IN Procedure.States %]
[%- stateClassName = CLASSNAME(State.Name) -%]
[%- stateGuardTimerDuration = GET_STATE_GUARD_TIMER_VAL(State.Name, Procedure) %]
[%- stateList = [] -%]
[%- FOREACH Event IN State.Events %]
[%- IF Event.NextState != "end_state" && Event.NextState != State.Name && !stateList.grep(Event.NextState).size %]
[%- stateList.push(Event.NextState) %]
[%- END %]
[%- END %]

/******************************************************************************
* Constructor
******************************************************************************/
[%- IF State.Name == DefaultState || DefaultState == "SM::State" %]
[% stateClassName %]::[% stateClassName %]():State()
[%- ELSE %]
[% stateClassName %]::[% stateClassName %](): [% CLASSNAME(DefaultState) %]()
[%- END %]
{
[%- IF stateGuardTimerDuration != '0'%]
        stateGuardTimeoutDuration_m = [% stateGuardTimerDuration %];
[%- END %]
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
[% stateClassName %]::~[% stateClassName %]()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
[% stateClassName %]* [% stateClassName %]::Instance()
{
        static [% stateClassName %] state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void [% stateClassName %]::initialize()
{
        [%- IF  DefaultState != "SM::State" && State.Name != DefaultState%]
        [% CLASSNAME(DefaultState) %]::initialize();
        [%- END %]
        [%- FOREACH Event = State.Events %]
        {
                ActionTable actionTable;
                [%- FOREACH Action = Event.Actions %]
                actionTable.addAction(&ActionHandlers::[% String.new(Action).lower %]);
                [%- END %]
				[%- IF Event.NextState != "end_state" %]
                actionTable.setNextState([% CLASSNAME(Event.NextState) %]::Instance());
                [%- END %]
                eventToActionsMap[[% Event.Name %]] = actionTable;
        }
        [%- END %]
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t [% stateClassName %]::getStateId()const
{
	return [% State.Name %];
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* [% stateClassName %]::getStateName()const
{
	return "[% State.Name %]";
}
[%- END %]
