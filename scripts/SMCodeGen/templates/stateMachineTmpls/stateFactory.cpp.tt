 [%- PROCESS templates/stateMachineTmpls/macros.tt %]
 [%- procList = [] %]
 [%- stateList = [] %]
 [%- FOREACH ProceduresArray = TemplateInputVar %]
     [%- FOREACH Procedure =  ProceduresArray %]
            [%- procList.push(Procedure.Name) %]
	    [%- FOREACH States = Procedure.States %]
		[%- stateList.push(States.Name) %]
	    [%- END %]
     [%- END %]
 [%- END %]
 [%- stateList = stateList.unique.sort %]
 
/*
 * Copyright 2019-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */
 
/**************************************
 * [% FILENAME(State.Name) %].cpp
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/stateMachineTmpls/stateFactory.cpp.tt>
 **************************************/

#include "mmeSmDefs.h"
#include "mmeStates/stateFactory.h"
[%- FOREACH Proc = procList %]
#include "mmeStates/[% FILENAME(Proc) %]States.h"
[%- END %]

using namespace mme;

/**********************************************
* Constructor
***********************************************/
StateFactory::StateFactory()
{
}

/**********************************************
* Destructor
***********************************************/
StateFactory::~StateFactory()
{
}

/**********************************************
* creates and returns static instance
***********************************************/

StateFactory* StateFactory::Instance()
{
	static StateFactory instance;
	return &instance;
}

void StateFactory::initialize()
{
	[%- FOREACH state = stateList%]
	[%- IF state != "end_state" %]
	[% CLASSNAME(state) %]::Instance()->initialize();
	[%- END %]
        [%- END %]

        populateEventStringMap();
}
