

/*
 * Copyright 2021-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */
 
/**************************************
 * dedBearerActProcedureStates.cpp
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/stateMachineTmpls/state.cpp.tt>
 **************************************/


#include "actionTable.h"
#include "actionHandlers/actionHandlers.h"
#include <mmeSmDefs.h>
#include <utils/mmeStatesUtils.h>
#include <utils/mmeTimerTypes.h>

#include "mmeStates/dedBearerActProcedureStates.h"

using namespace mme;
using namespace SM;


/******************************************************************************
* Constructor
******************************************************************************/
DedActStart::DedActStart():State()
{
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
DedActStart::~DedActStart()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
DedActStart* DedActStart::Instance()
{
        static DedActStart state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void DedActStart::initialize()
{
        {
                ActionTable actionTable;
                actionTable.setNextState(DedActWfBearerAndSessionSetup::Instance());
                eventToActionsMap[GW_INIT_DED_BEARER_AND_SESSION_SETUP] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t DedActStart::getStateId()const
{
	return ded_act_start;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* DedActStart::getStateName()const
{
	return "ded_act_start";
}

/******************************************************************************
* Constructor
******************************************************************************/
DedActWfBearerAndSessionSetup::DedActWfBearerAndSessionSetup():State()
{
        stateGuardTimeoutDuration_m = defaultStateGuardTimerDuration_c;
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
DedActWfBearerAndSessionSetup::~DedActWfBearerAndSessionSetup()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
DedActWfBearerAndSessionSetup* DedActWfBearerAndSessionSetup::Instance()
{
        static DedActWfBearerAndSessionSetup state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void DedActWfBearerAndSessionSetup::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::process_erab_setup_response);
                actionTable.setNextState(DedActWfSessionSetup::Instance());
                eventToActionsMap[ERAB_SETUP_RESP_FROM_ENB] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::process_act_ded_bearer_accept);
                actionTable.setNextState(DedActWfBearerSetup::Instance());
                eventToActionsMap[ACT_DED_BEARER_ACCEPT_FROM_UE] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::process_act_ded_bearer_reject);
                actionTable.addAction(&ActionHandlers::abort_ded_activation);
                actionTable.setNextState(DedActWfBearerSetup::Instance());
                eventToActionsMap[ACT_DED_BEARER_REJECT_FROM_UE] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_state_guard_timeouts);
                eventToActionsMap[STATE_GUARD_TIMEOUT] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::abort_ded_activation);
                eventToActionsMap[ABORT_EVENT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t DedActWfBearerAndSessionSetup::getStateId()const
{
	return ded_act_wf_bearer_and_session_setup;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* DedActWfBearerAndSessionSetup::getStateName()const
{
	return "ded_act_wf_bearer_and_session_setup";
}

/******************************************************************************
* Constructor
******************************************************************************/
DedActWfSessionSetup::DedActWfSessionSetup():State()
{
        stateGuardTimeoutDuration_m = defaultStateGuardTimerDuration_c;
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
DedActWfSessionSetup::~DedActWfSessionSetup()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
DedActWfSessionSetup* DedActWfSessionSetup::Instance()
{
        static DedActWfSessionSetup state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void DedActWfSessionSetup::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::process_act_ded_bearer_accept);
                actionTable.addAction(&ActionHandlers::ded_act_complete);
                eventToActionsMap[ACT_DED_BEARER_ACCEPT_FROM_UE] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_state_guard_timeouts);
                eventToActionsMap[STATE_GUARD_TIMEOUT] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::process_act_ded_bearer_reject);
                actionTable.addAction(&ActionHandlers::abort_ded_activation);
                eventToActionsMap[ACT_DED_BEARER_REJECT_FROM_UE] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::abort_ded_activation);
                eventToActionsMap[ABORT_EVENT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t DedActWfSessionSetup::getStateId()const
{
	return ded_act_wf_session_setup;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* DedActWfSessionSetup::getStateName()const
{
	return "ded_act_wf_session_setup";
}

/******************************************************************************
* Constructor
******************************************************************************/
DedActWfBearerSetup::DedActWfBearerSetup():State()
{
        stateGuardTimeoutDuration_m = defaultStateGuardTimerDuration_c;
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
DedActWfBearerSetup::~DedActWfBearerSetup()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
DedActWfBearerSetup* DedActWfBearerSetup::Instance()
{
        static DedActWfBearerSetup state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void DedActWfBearerSetup::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::process_erab_setup_response);
                actionTable.addAction(&ActionHandlers::ded_act_complete);
                eventToActionsMap[ERAB_SETUP_RESP_FROM_ENB] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_state_guard_timeouts);
                eventToActionsMap[STATE_GUARD_TIMEOUT] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::abort_ded_activation);
                eventToActionsMap[ABORT_EVENT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t DedActWfBearerSetup::getStateId()const
{
	return ded_act_wf_bearer_setup;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* DedActWfBearerSetup::getStateName()const
{
	return "ded_act_wf_bearer_setup";
}
