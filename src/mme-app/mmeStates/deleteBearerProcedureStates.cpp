

/*
 * Copyright 2021-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */
 
/**************************************
 * deleteBearerProcedureStates.cpp
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/stateMachineTmpls/state.cpp.tt>
 **************************************/


#include "actionTable.h"
#include "actionHandlers/actionHandlers.h"
#include <mmeSmDefs.h>
#include <utils/mmeStatesUtils.h>
#include <utils/mmeTimerTypes.h>

#include "mmeStates/deleteBearerProcedureStates.h"

using namespace mme;
using namespace SM;


/******************************************************************************
* Constructor
******************************************************************************/
DeleteBearerStart::DeleteBearerStart():State()
{
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
DeleteBearerStart::~DeleteBearerStart()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
DeleteBearerStart* DeleteBearerStart::Instance()
{
        static DeleteBearerStart state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void DeleteBearerStart::initialize()
{
        {
                ActionTable actionTable;
                actionTable.setNextState(DeleteBearerWfPagingComplete::Instance());
                eventToActionsMap[GW_CP_REQ_INIT_PAGING] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::init_ded_bearer_deactivation);
                actionTable.setNextState(DeleteBearerWfDeactComplete::Instance());
                eventToActionsMap[START_DED_DEACTIVATION] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::init_ue_detach_procedure);
                actionTable.setNextState(DeleteBearerWfDeactComplete::Instance());
                eventToActionsMap[START_UE_DETACH] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::send_delete_bearer_response);
                actionTable.addAction(&ActionHandlers::abort_delete_bearer_procedure);
                eventToActionsMap[ABORT_EVENT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t DeleteBearerStart::getStateId()const
{
	return delete_bearer_start;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* DeleteBearerStart::getStateName()const
{
	return "delete_bearer_start";
}

/******************************************************************************
* Constructor
******************************************************************************/
DeleteBearerWfPagingComplete::DeleteBearerWfPagingComplete():State()
{
        stateGuardTimeoutDuration_m = 12000;
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
DeleteBearerWfPagingComplete::~DeleteBearerWfPagingComplete()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
DeleteBearerWfPagingComplete* DeleteBearerWfPagingComplete::Instance()
{
        static DeleteBearerWfPagingComplete state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void DeleteBearerWfPagingComplete::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::check_and_init_deactivation);
                actionTable.setNextState(DeleteBearerStart::Instance());
                eventToActionsMap[PAGING_COMPLETE] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_paging_failure);
                eventToActionsMap[PAGING_FAILURE] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_state_guard_timeouts);
                eventToActionsMap[STATE_GUARD_TIMEOUT] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::send_delete_bearer_response);
                actionTable.addAction(&ActionHandlers::abort_delete_bearer_procedure);
                eventToActionsMap[ABORT_EVENT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t DeleteBearerWfPagingComplete::getStateId()const
{
	return delete_bearer_wf_paging_complete;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* DeleteBearerWfPagingComplete::getStateName()const
{
	return "delete_bearer_wf_paging_complete";
}

/******************************************************************************
* Constructor
******************************************************************************/
DeleteBearerWfDeactComplete::DeleteBearerWfDeactComplete():State()
{
        stateGuardTimeoutDuration_m = 12000;
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
DeleteBearerWfDeactComplete::~DeleteBearerWfDeactComplete()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
DeleteBearerWfDeactComplete* DeleteBearerWfDeactComplete::Instance()
{
        static DeleteBearerWfDeactComplete state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void DeleteBearerWfDeactComplete::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_ded_deact_cmp_ind);
                actionTable.addAction(&ActionHandlers::send_delete_bearer_response);
                actionTable.addAction(&ActionHandlers::delete_bearer_proc_complete);
                eventToActionsMap[DED_DEACT_COMPLETE] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::send_delete_bearer_response);
                actionTable.addAction(&ActionHandlers::delete_bearer_proc_complete);
                eventToActionsMap[DETACH_COMPLETE] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_detach_failure);
                eventToActionsMap[DETACH_FAILURE] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_state_guard_timeouts);
                eventToActionsMap[STATE_GUARD_TIMEOUT] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::send_delete_bearer_response);
                actionTable.addAction(&ActionHandlers::abort_delete_bearer_procedure);
                eventToActionsMap[ABORT_EVENT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t DeleteBearerWfDeactComplete::getStateId()const
{
	return delete_bearer_wf_deact_complete;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* DeleteBearerWfDeactComplete::getStateName()const
{
	return "delete_bearer_wf_deact_complete";
}
