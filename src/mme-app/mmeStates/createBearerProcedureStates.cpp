

/*
 * Copyright 2021-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */
 
/**************************************
 * createBearerProcedureStates.cpp
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/stateMachineTmpls/state.cpp.tt>
 **************************************/


#include "actionTable.h"
#include "actionHandlers/actionHandlers.h"
#include <mmeSmDefs.h>
#include <utils/mmeStatesUtils.h>
#include <utils/mmeTimerTypes.h>

#include "mmeStates/createBearerProcedureStates.h"

using namespace mme;
using namespace SM;


/******************************************************************************
* Constructor
******************************************************************************/
CreateBearerStart::CreateBearerStart():State()
{
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
CreateBearerStart::~CreateBearerStart()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
CreateBearerStart* CreateBearerStart::Instance()
{
        static CreateBearerStart state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void CreateBearerStart::initialize()
{
        {
                ActionTable actionTable;
                actionTable.setNextState(CreateBearerWfPagingComplete::Instance());
                eventToActionsMap[GW_CP_REQ_INIT_PAGING] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::init_ded_bearer_activation);
                actionTable.addAction(&ActionHandlers::send_bearer_setup_and_sess_mgmt_req);
                actionTable.setNextState(CreateBearerWfDedActComplete::Instance());
                eventToActionsMap[CREATE_BEARER_START] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::send_create_bearer_response);
                actionTable.addAction(&ActionHandlers::abort_create_bearer_procedure);
                eventToActionsMap[ABORT_EVENT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t CreateBearerStart::getStateId()const
{
	return create_bearer_start;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* CreateBearerStart::getStateName()const
{
	return "create_bearer_start";
}

/******************************************************************************
* Constructor
******************************************************************************/
CreateBearerWfPagingComplete::CreateBearerWfPagingComplete():State()
{
        stateGuardTimeoutDuration_m = 12000;
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
CreateBearerWfPagingComplete::~CreateBearerWfPagingComplete()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
CreateBearerWfPagingComplete* CreateBearerWfPagingComplete::Instance()
{
        static CreateBearerWfPagingComplete state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void CreateBearerWfPagingComplete::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::init_ded_bearer_activation);
                actionTable.addAction(&ActionHandlers::send_bearer_setup_and_sess_mgmt_req);
                actionTable.setNextState(CreateBearerWfDedActComplete::Instance());
                eventToActionsMap[PAGING_COMPLETE] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_paging_failure);
                eventToActionsMap[PAGING_FAILURE] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_state_guard_timeouts);
                eventToActionsMap[STATE_GUARD_TIMEOUT] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::send_create_bearer_response);
                actionTable.addAction(&ActionHandlers::abort_create_bearer_procedure);
                eventToActionsMap[ABORT_EVENT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t CreateBearerWfPagingComplete::getStateId()const
{
	return create_bearer_wf_paging_complete;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* CreateBearerWfPagingComplete::getStateName()const
{
	return "create_bearer_wf_paging_complete";
}

/******************************************************************************
* Constructor
******************************************************************************/
CreateBearerWfDedActComplete::CreateBearerWfDedActComplete():State()
{
        stateGuardTimeoutDuration_m = 12000;
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
CreateBearerWfDedActComplete::~CreateBearerWfDedActComplete()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
CreateBearerWfDedActComplete* CreateBearerWfDedActComplete::Instance()
{
        static CreateBearerWfDedActComplete state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void CreateBearerWfDedActComplete::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_ded_act_cmp_ind);
                actionTable.addAction(&ActionHandlers::send_create_bearer_response);
                actionTable.addAction(&ActionHandlers::create_bearer_proc_complete);
                eventToActionsMap[DED_ACT_COMPLETE] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_state_guard_timeouts);
                eventToActionsMap[STATE_GUARD_TIMEOUT] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::send_create_bearer_response);
                actionTable.addAction(&ActionHandlers::abort_create_bearer_procedure);
                eventToActionsMap[ABORT_EVENT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t CreateBearerWfDedActComplete::getStateId()const
{
	return create_bearer_wf_ded_act_complete;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* CreateBearerWfDedActComplete::getStateName()const
{
	return "create_bearer_wf_ded_act_complete";
}
