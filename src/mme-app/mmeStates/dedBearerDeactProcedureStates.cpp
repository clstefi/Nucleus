

/*
 * Copyright 2021-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */
 
/**************************************
 * dedBearerDeactProcedureStates.cpp
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/stateMachineTmpls/state.cpp.tt>
 **************************************/


#include "actionTable.h"
#include "actionHandlers/actionHandlers.h"
#include <mmeSmDefs.h>
#include <utils/mmeStatesUtils.h>
#include <utils/mmeTimerTypes.h>

#include "mmeStates/dedBearerDeactProcedureStates.h"

using namespace mme;
using namespace SM;


/******************************************************************************
* Constructor
******************************************************************************/
DedDeactStart::DedDeactStart():State()
{
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
DedDeactStart::~DedDeactStart()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
DedDeactStart* DedDeactStart::Instance()
{
        static DedDeactStart state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void DedDeactStart::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::send_erab_rel_cmd_and_deact_eps_br_ctxt_req);
                actionTable.setNextState(DedDeactWfBearerAndSessionTearup::Instance());
                eventToActionsMap[DED_BEARER_DEACT_START] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::abort_ded_deactivation);
                eventToActionsMap[ABORT_EVENT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t DedDeactStart::getStateId()const
{
	return ded_deact_start;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* DedDeactStart::getStateName()const
{
	return "ded_deact_start";
}

/******************************************************************************
* Constructor
******************************************************************************/
DedDeactWfBearerAndSessionTearup::DedDeactWfBearerAndSessionTearup():State()
{
        stateGuardTimeoutDuration_m = defaultStateGuardTimerDuration_c;
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
DedDeactWfBearerAndSessionTearup::~DedDeactWfBearerAndSessionTearup()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
DedDeactWfBearerAndSessionTearup* DedDeactWfBearerAndSessionTearup::Instance()
{
        static DedDeactWfBearerAndSessionTearup state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void DedDeactWfBearerAndSessionTearup::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::process_erab_release_response);
                actionTable.setNextState(DedDeactWfSessionTearup::Instance());
                eventToActionsMap[ERAB_REL_RESP_FROM_ENB] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::process_deact_ded_bearer_accept);
                actionTable.setNextState(DedDeactWfBearerTearup::Instance());
                eventToActionsMap[DEACT_DED_BEARER_ACCEPT_FROM_UE] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_state_guard_timeouts);
                eventToActionsMap[STATE_GUARD_TIMEOUT] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::abort_ded_deactivation);
                eventToActionsMap[ABORT_EVENT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t DedDeactWfBearerAndSessionTearup::getStateId()const
{
	return ded_deact_wf_bearer_and_session_tearup;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* DedDeactWfBearerAndSessionTearup::getStateName()const
{
	return "ded_deact_wf_bearer_and_session_tearup";
}

/******************************************************************************
* Constructor
******************************************************************************/
DedDeactWfSessionTearup::DedDeactWfSessionTearup():State()
{
        stateGuardTimeoutDuration_m = defaultStateGuardTimerDuration_c;
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
DedDeactWfSessionTearup::~DedDeactWfSessionTearup()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
DedDeactWfSessionTearup* DedDeactWfSessionTearup::Instance()
{
        static DedDeactWfSessionTearup state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void DedDeactWfSessionTearup::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::process_deact_ded_bearer_accept);
                actionTable.addAction(&ActionHandlers::ded_deact_complete);
                eventToActionsMap[DEACT_DED_BEARER_ACCEPT_FROM_UE] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_state_guard_timeouts);
                eventToActionsMap[STATE_GUARD_TIMEOUT] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::abort_ded_deactivation);
                eventToActionsMap[ABORT_EVENT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t DedDeactWfSessionTearup::getStateId()const
{
	return ded_deact_wf_session_tearup;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* DedDeactWfSessionTearup::getStateName()const
{
	return "ded_deact_wf_session_tearup";
}

/******************************************************************************
* Constructor
******************************************************************************/
DedDeactWfBearerTearup::DedDeactWfBearerTearup():State()
{
        stateGuardTimeoutDuration_m = defaultStateGuardTimerDuration_c;
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
DedDeactWfBearerTearup::~DedDeactWfBearerTearup()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
DedDeactWfBearerTearup* DedDeactWfBearerTearup::Instance()
{
        static DedDeactWfBearerTearup state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void DedDeactWfBearerTearup::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::process_erab_release_response);
                actionTable.addAction(&ActionHandlers::ded_deact_complete);
                eventToActionsMap[ERAB_REL_RESP_FROM_ENB] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_state_guard_timeouts);
                eventToActionsMap[STATE_GUARD_TIMEOUT] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::abort_ded_deactivation);
                eventToActionsMap[ABORT_EVENT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t DedDeactWfBearerTearup::getStateId()const
{
	return ded_deact_wf_bearer_tearup;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* DedDeactWfBearerTearup::getStateName()const
{
	return "ded_deact_wf_bearer_tearup";
}
