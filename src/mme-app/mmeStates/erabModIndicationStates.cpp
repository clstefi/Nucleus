

/*
 * Copyright 2021-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */
 
/**************************************
 * erabModIndicationStates.cpp
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/stateMachineTmpls/state.cpp.tt>
 **************************************/


#include "actionTable.h"
#include "actionHandlers/actionHandlers.h"
#include <mmeSmDefs.h>
#include <utils/mmeStatesUtils.h>
#include <utils/mmeTimerTypes.h>

#include "mmeStates/erabModIndicationStates.h"

using namespace mme;
using namespace SM;


/******************************************************************************
* Constructor
******************************************************************************/
ErabModIndStart::ErabModIndStart():State()
{
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
ErabModIndStart::~ErabModIndStart()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
ErabModIndStart* ErabModIndStart::Instance()
{
        static ErabModIndStart state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void ErabModIndStart::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::send_mb_req_to_sgw_svc_req);
                actionTable.setNextState(ErabModIndWfMbResp::Instance());
                eventToActionsMap[eRAB_MOD_IND_START] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t ErabModIndStart::getStateId()const
{
	return erab_mod_ind_start;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* ErabModIndStart::getStateName()const
{
	return "erab_mod_ind_start";
}

/******************************************************************************
* Constructor
******************************************************************************/
ErabModIndWfMbResp::ErabModIndWfMbResp():State()
{
        stateGuardTimeoutDuration_m = defaultStateGuardTimerDuration_c;
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
ErabModIndWfMbResp::~ErabModIndWfMbResp()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
ErabModIndWfMbResp* ErabModIndWfMbResp::Instance()
{
        static ErabModIndWfMbResp state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void ErabModIndWfMbResp::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::process_mb_resp_svc_req);
                actionTable.addAction(&ActionHandlers::send_erab_mod_conf_to_enb);
                actionTable.addAction(&ActionHandlers::erab_mod_ind_complete);
                eventToActionsMap[MB_RESP_FROM_SGW] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::abort_erab_mod_indication);
                eventToActionsMap[ABORT_EVENT] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_state_guard_timeouts_for_erab_mod_ind);
                actionTable.addAction(&ActionHandlers::abort_erab_mod_indication);
                eventToActionsMap[STATE_GUARD_TIMEOUT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t ErabModIndWfMbResp::getStateId()const
{
	return erab_mod_ind_wf_mb_resp;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* ErabModIndWfMbResp::getStateName()const
{
	return "erab_mod_ind_wf_mb_resp";
}
